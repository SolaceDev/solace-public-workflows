name: RC Helper
description: Reusable action for RC helper Slack notifications via Docker container.
inputs:
  rc_step:
    description: RC step (e.g., post_to_thread, update_message_header)
    required: true
  message_header:
    description: Slack message header (for post_to_channel)
    required: false
  repo_name:
    description: GitHub repository name (e.g., owner/repo)
    required: false
  slack_token:
    description: Slack API token (should be passed as a secret)
    required: true
  slack_channel:
    description: Slack channel ID (e.g., G015384QZAB)
    required: true
  thread_ts:
    description: Slack thread timestamp (for thread updates)
    required: false
  message:
    description: Slack message content (for post_to_channel)
    required: false
  thread_message:
    description: Slack thread message content (for post_to_thread)
    required: false
  new_message_header:
    description: Slack message header (for update_message_header step)
    required: false
  change_log_header_metadata:
    description: Change log header metadata (for update_message_header step)
    required: false
  previous_message:
    description: Previous Slack message (for update_message_header step)
    required: false
  deployed_ref:
    description: Deployed reference SHA or tag (for changelog message, e.g., previous deployment, base branch, or environment)
    required: false
  candidate_ref:
    description: Candidate reference SHA or tag (for changelog message, e.g., new deployment, PR head, or target commit)
    required: false
  contributors_raw_list:
    description: Contributors list
    required: false
  ddb_item_to_be_added:
    description: JSON string of the item (for add_item_from_json_to_dynamodb_table)
    required: false
  ddb_table_name:
    description: DynamoDB table name (for DynamoDB steps)
    required: false
  ddb_partition_key:
    description: Partition key name (for DynamoDB steps)
    required: false
  ddb_sort_key:
    description: Sort key name (for add_item_from_json_to_dynamodb_table)
    required: false
  ddb_query_json:
    description: JSON string for the query (for item_exists_in_dynamodb)
    required: false
  ddb_exists_output:
    description: "Output variable name (default: ITEM_EXISTS) (for item_exists_in_dynamodb)"
    required: false
  ddb_field_path:
    description: "Dot-separated path to the field (e.g., dev.image_tag for a single value, dev for the whole section) (for get_item_value_from_dynamodb)"
    required: false
  ddb_output_name:
    description: "Output variable name (default: FIELD_VALUE) (for get_item_value_from_dynamodb)"
    required: false
  ddb_return_section:
    description: "If set to true, returns the entire section as clean JSON; if false or omitted, returns a single field value (for get_item_value_from_dynamodb)"
    required: false

runs:
  using: docker
  image: docker://ghcr.io/solacedev/maas-build-actions:master
  entrypoint: /bin/sh
  args:
    - -c
    - |
      export SLACK_TOKEN="$INPUT_SLACK_TOKEN"
      export SLACK_CHANNEL="$INPUT_SLACK_CHANNEL"
      export RC_STEP="$INPUT_RC_STEP"
      export RC_PYTHON="python3"
      export RC_HELPER_SCRIPT="/maas-build-actions/scripts/cicd-helper/cicd-helper.py"
      if [ -n "$INPUT_THREAD_TS" ]; then export THREAD_TS="$INPUT_THREAD_TS"; fi
      if [ -n "$INPUT_MESSAGE" ]; then export MESSAGE="$INPUT_MESSAGE"; fi
      if [ -n "$INPUT_THREAD_MESSAGE" ]; then export THREAD_MESSAGE="$INPUT_THREAD_MESSAGE"; fi
      if [ -n "$INPUT_MESSAGE_HEADER" ]; then export MESSAGE_HEADER="$INPUT_MESSAGE_HEADER"; fi
      if [ -n "$INPUT_NEW_MESSAGE_HEADER" ]; then export NEW_MESSAGE_HEADER="$INPUT_NEW_MESSAGE_HEADER"; fi
      if [ -n "$INPUT_CHANGE_LOG_HEADER_METADATA" ]; then export CHANGE_LOG_HEADER_METADATA="$INPUT_CHANGE_LOG_HEADER_METADATA"; fi
      if [ -n "$INPUT_PREVIOUS_MESSAGE" ]; then export PREVIOUS_MESSAGE="$INPUT_PREVIOUS_MESSAGE"; fi
      if [ -n "$INPUT_REPO_NAME" ]; then export REPO_NAME="$INPUT_REPO_NAME"; fi
      if [ -n "$INPUT_DEPLOYED_REF" ]; then export DEPLOYED_REF="$INPUT_DEPLOYED_REF"; fi
      if [ -n "$INPUT_CANDIDATE_REF" ]; then export CANDIDATE_REF="$INPUT_CANDIDATE_REF"; fi
      if [ -n "$INPUT_CONTRIBUTORS_RAW_LIST" ]; then export CONTRIBUTORS_RAW_LIST="$INPUT_CONTRIBUTORS_RAW_LIST"; fi
      if [ -n "$INPUT_DDB_ITEM_TO_BE_ADDED" ]; then export DDB_ITEM_TO_BE_ADDED="$INPUT_DDB_ITEM_TO_BE_ADDED"; fi
      if [ -n "$INPUT_DDB_TABLE_NAME" ]; then export DDB_TABLE_NAME="$INPUT_DDB_TABLE_NAME"; fi
      if [ -n "$INPUT_DDB_PARTITION_KEY" ]; then export DDB_PARTITION_KEY="$INPUT_DDB_PARTITION_KEY"; fi
      if [ -n "$INPUT_DDB_SORT_KEY" ]; then export DDB_SORT_KEY="$INPUT_DDB_SORT_KEY"; fi
      if [ -n "$INPUT_DDB_QUERY_JSON" ]; then export DDB_QUERY_JSON="$INPUT_DDB_QUERY_JSON"; fi
      if [ -n "$INPUT_DDB_EXISTS_OUTPUT" ]; then export DDB_EXISTS_OUTPUT="$INPUT_DDB_EXISTS_OUTPUT"; fi
      if [ -n "$INPUT_DDB_FIELD_PATH" ]; then export DDB_FIELD_PATH="$INPUT_DDB_FIELD_PATH"; fi
      if [ -n "$INPUT_DDB_OUTPUT_NAME" ]; then export DDB_OUTPUT_NAME="$INPUT_DDB_OUTPUT_NAME"; fi
      if [ -n "$INPUT_DDB_RETURN_SECTION" ]; then export DDB_RETURN_SECTION="$INPUT_DDB_RETURN_SECTION"; fi

      echo "Debug: Inputs:"
      echo "RC_STEP: $RC_STEP"
      echo "SLACK_TOKEN: [REDACTED]"
      echo "SLACK_CHANNEL: $SLACK_CHANNEL"
      echo "THREAD_TS: $THREAD_TS"
      echo "MESSAGE: $MESSAGE"
      echo "THREAD_MESSAGE: $THREAD_MESSAGE"
      echo "NEW_MESSAGE_HEADER: $NEW_MESSAGE_HEADER"
      echo "CHANGE_LOG_HEADER_METADATA: $CHANGE_LOG_HEADER_METADATA"
      echo "PREVIOUS_MESSAGE: $PREVIOUS_MESSAGE"
      echo "REPO_NAME: $REPO_NAME"
      echo "DEPLOYED_REF: $DEPLOYED_REF"
      echo "CANDIDATE_REF: $CANDIDATE_REF"
      echo "DDB_ITEM_TO_BE_ADDED: $DDB_ITEM_TO_BE_ADDED"
      echo "DDB_TABLE_NAME: $DDB_TABLE_NAME"
      echo "DDB_PARTITION_KEY: $DDB_PARTITION_KEY"
      echo "DDB_SORT_KEY: $DDB_SORT_KEY"
      echo "DDB_QUERY_JSON: $DDB_QUERY_JSON"
      echo "DDB_EXISTS_OUTPUT: $DDB_EXISTS_OUTPUT"
      echo "CONTRIBUTORS_RAW_LIST: $CONTRIBUTORS_RAW_LIST"
      echo "DDB_FIELD_PATH: $DDB_FIELD_PATH"
      echo "DDB_OUTPUT_NAME: $DDB_OUTPUT_NAME"
      echo "DDB_RETURN_SECTION: $DDB_RETURN_SECTION"

      source /maas-build-actions/venv/bin/activate
      $RC_PYTHON $RC_HELPER_SCRIPT
