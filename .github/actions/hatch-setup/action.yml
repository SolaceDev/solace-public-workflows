name: hatch-install-with-caching
description: Hatch install with support for caching of dependency groups.
inputs:
  min-python-version:
    description: "Minimum Python version to support."
    default: "3.10"
  max-python-version:
    description: "Maximum Python version to support."
    default: "3.13"
outputs:
  matrix-present:
    description: "Whether the test matrix is present."
    value: ${{ steps.test-matrix-present.outputs.matrix-present == 'true' }}
runs:
  using: composite
  steps:
    - name: Setup Hatch Environment
      run: |
        echo "HATCH_CACHE_DIR=${{ github.workspace }}/.hatch_cache" >> $GITHUB_ENV
        echo "HATCH_DATA_DIR=${{ github.workspace }}/.hatch_data" >> $GITHUB_ENV
      shell: bash

    - name: Verify 'pyproject.toml' exists)
      run: test -f pyproject.toml
      shell: bash

    - name: Install Hatch
      uses: pypa/hatch@install

    - name: Test Matrix Present
      id: test-matrix-present
      shell: bash
      run: |
        # Verify if hatch specific test matrix is present in pyproject.toml
        MATRIX_PRESENT=$(awk -v min="${{ inputs.min-python-version }}" -v max="${{ inputs.max-python-version }}" '
            /\[tool\.hatch\.envs\.hatch-test\]/ { in_env=1; next }
            in_env && /installer = "pip"/ { has_pip_installer=1; in_env=0 }
            /\[\[tool\.hatch\.envs\.hatch-test\.matrix\]\]/ { in_matrix=1; next }
            in_matrix && /python = \[/ {
              if (index($0, min)) found_min=1
              if (index($0, max)) found_max=1
              in_matrix=0
            }
            END {
              if (!has_pip_installer || !found_min || !found_max) {
                print "false"
                exit 0
              }
              print "true"
              exit 0
            }
          ' pyproject.toml)
        echo "matrix-present=$MATRIX_PRESENT" >> $GITHUB_OUTPUT

    - name: Restore Hatch Directory
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ${{ env.HATCH_CACHE_DIR }}
          ${{ env.HATCH_DATA_DIR }}
        key: ${{ runner.os }}-hatch-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements.txt') }}

    - name: Install Hatch Matrix Python Versions
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'true'
      run: |
        hatch python install ${{ inputs.min-python-version }} ${{ inputs.max-python-version }}

    - name: Install Default Python
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'false'
      run: |
        hatch python install ${{ inputs.max-python-version }}

    - name: Export Hatch Python Path
      shell: bash
      run: |
        if [ "${{ steps.test-matrix-present.outputs.matrix-present }}" == "true" ]; then
          # Get short python version, like "3.10", "3.11", "3.12"
          MIN_PYTHON_VERSION_SHORT=$(echo "${{ inputs.min-python-version }}" | cut -d. -f1,2)
          MAX_PYTHON_VERSION_SHORT=$(echo "${{ inputs.max-python-version }}" | cut -d. -f1,2)
          
          # Find the path to the python version in the hatch directory
          min_version_path=$(hatch python find $MIN_PYTHON_VERSION_SHORT)
          max_version_path=$(hatch python find $MAX_PYTHON_VERSION_SHORT)

          echo "Min Version Path: $min_version_path"
          echo "Max Version Path: $max_version_path"

          hatch python show

          # Set hatch enviornment variable name for python Distribution eg. HATCH_PYTHON_SOURCE_PYPY3_10
          MIN_VERSION_ENV_NAME="HATCH_PYTHON_SOURCE_PYPY${MIN_PYTHON_VERSION_SHORT//./\_}"
          MAX_VERSION_ENV_NAME="HATCH_PYTHON_SOURCE_PYPY${MAX_PYTHON_VERSION_SHORT//./\_}"

          # Set the hatch enviornment variable for the python distribution
          echo "${MIN_VERSION_ENV_NAME}=${min_version_path}" >> $GITHUB_ENV
          echo "${MAX_VERSION_ENV_NAME}=${max_version_path}" >> $GITHUB_ENV
        elif [ "${{ steps.test-matrix-present.outputs.matrix-present }}" == "false" ]; then
          echo "HATCH_PYTHON_PATH=${{ steps.hatch-setup.outputs.hatch-python-path }}" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'false'
      run: |
        hatch env create

    - name: Install Dependencies for test matrix
      shell: bash
      with:
        env:
          HATCH_PYTHON_SOURCE_PYPY3_10: ${{ env.HATCH_PYTHON_SOURCE_PYPY3_10 }}
          HATCH_PYTHON_SOURCE_PYPY3_12: ${{ env.HATCH_PYTHON_SOURCE_PYPY3_12 }}
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'true'
      run: |
        hatch env create hatch-test.py${{ inputs.min-python-version }}
        hatch env create hatch-test.py${{ inputs.max-python-version }}

    - name: Install Dependencies for default python version
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'false'
      run: |
        hatch run pip install --upgrade pip
        hatch run pip install twine pytest pytest-cov

    - name: Install Dependencies for test matrix python version
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'true'
      run: |
        hatch run hatch-test.py${{ inputs.min-python-version }}:pip install --upgrade pip
        hatch run hatch-test.py${{ inputs.max-python-version }}:pip install --upgrade pip
        hatch run hatch-test.py${{ inputs.min-python-version }}:pip install twine pytest pytest-cov
        hatch run hatch-test.py${{ inputs.max-python-version }}:pip install twine pytest pytest-cov

    - name: Install Requirements.txt Dependencies for default python version
      shell: bash
      if: hashFiles('requirements.txt') != '' && steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'false'
      run: |
        hatch run pip install --upgrade -r requirements.txt

    - name: Install Requirements.txt Dependencies for test matrix python version
      shell: bash
      if: hashFiles('requirements.txt') != '' && steps.cache.outputs.cache-hit != 'true' && steps.test-matrix-present.outputs.matrix-present == 'true'
      run: |
        hatch run hatch-test.py${{ inputs.min-python-version }}:pip install --upgrade -r requirements.txt
        hatch run hatch-test.py${{ inputs.max-python-version }}:pip install --upgrade -r requirements.txt
