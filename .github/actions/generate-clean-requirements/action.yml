name: Generate Clean Requirements
description: Generate separate requirements.txt files for each profile in pyproject.toml to prevent dependency conflicts

inputs:
  max-python-version:
    description: "Maximum Python version to use for hatch"
    required: false
    default: "3.13"
  whitesource_config_file:
    description: "Path to WhiteSource config file to update"
    required: false
    default: ""
  script-path:
    description: "Path to the consolidation script"
    required: false
    default: ".github/workflows-repo/.github/scripts/consolidate_requirements.py"
  output-dir:
    description: "Directory to write requirements files"
    required: false
    default: "."

outputs:
  requirements-files:
    description: "List of generated requirements files"
    value: ${{ steps.generate-requirements.outputs.requirements-files }}
  main-requirements-file:
    description: "Path to the main requirements file"
    value: ${{ steps.generate-requirements.outputs.main-requirements-file }}

runs:
  using: composite
  steps:
    - name: Setup Python Dependencies
      shell: bash
      run: |
        echo "üîß Installing required Python dependencies..."
        python -m pip install packaging toml --quiet
        echo "‚úÖ Dependencies installed"

    - name: Generate Requirements Files
      id: generate-requirements
      shell: bash
      run: |
        echo "üîß Generating requirements files from pyproject.toml..."

        SCRIPT_PATH="${{ inputs.script-path }}"
        PYPROJECT_FILE="pyproject.toml"
        OUTPUT_DIR="${{ inputs.output-dir }}"

        if [ ! -f "$PYPROJECT_FILE" ]; then
          echo "‚ùå pyproject.toml not found at: $PYPROJECT_FILE"
          exit 1
        fi

        if [ ! -f "$SCRIPT_PATH" ]; then
          echo "‚ùå Consolidation script not found at: $SCRIPT_PATH"
          exit 1
        fi

        # Run the consolidation script
        if ! python "$SCRIPT_PATH" "$PYPROJECT_FILE" "$OUTPUT_DIR"; then
          echo "‚ùå Failed to generate requirements files"
          exit 1
        fi

        # Read the generated files list
        FILES_LIST_PATH="$OUTPUT_DIR/requirements-files.txt"
        if [ -f "$FILES_LIST_PATH" ]; then
          REQUIREMENTS_FILES=$(cat "$FILES_LIST_PATH" | tr '\n' ' ' | sed 's/ $//')
          echo "requirements-files=$REQUIREMENTS_FILES" >> $GITHUB_OUTPUT
          echo "‚úÖ Generated requirements files: $REQUIREMENTS_FILES"
          
          # Set main requirements file
          if [ -f "$OUTPUT_DIR/requirements.txt" ]; then
            echo "main-requirements-file=$OUTPUT_DIR/requirements.txt" >> $GITHUB_OUTPUT
          else
            # Use the first file as main if requirements.txt doesn't exist
            FIRST_FILE=$(echo "$REQUIREMENTS_FILES" | cut -d' ' -f1)
            echo "main-requirements-file=$OUTPUT_DIR/$FIRST_FILE" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå No requirements files list found after script execution"
          exit 1
        fi

        # Display generated files
        echo "üìÑ Generated requirements files:"
        ls -la "$OUTPUT_DIR"/requirements*.txt

    - name: Find Python and Pip paths
      id: find-python
      shell: bash
      env:
        HATCH_DATA_DIR: ${{ github.workspace }}/.hatch/data
      run: |
        # Get the Python executable path from hatch
        PYTHON_PATH=$Python3_ROOT_DIR/bin/python
        echo "Using Python: $PYTHON_PATH"
        echo "python-path=$PYTHON_PATH" >> $GITHUB_OUTPUT

        # Get pip path
        PIP_PATH=$Python3_ROOT_DIR/bin/pip
        echo "pip-path=$PIP_PATH" >> $GITHUB_OUTPUT

        # Verify paths exist
        if [ ! -f "$PYTHON_PATH" ]; then
          echo "‚ùå Python executable not found at: $PYTHON_PATH"
          exit 1
        fi

        echo "‚úÖ Python executable found: $PYTHON_PATH"
        echo "‚úÖ Pip path: $PIP_PATH"

    - name: Update WhiteSource Config
      if: inputs.whitesource_config_file != ''
      shell: bash
      run: |
        echo "üîß Updating WhiteSource configuration..."

        PYTHON_PATH="${{ steps.find-python.outputs.python-path }}"
        PIP_PATH="${{ steps.find-python.outputs.pip-path }}"
        CONFIG_FILE="${{ inputs.whitesource_config_file }}"
        OUTPUT_DIR="${{ inputs.output-dir }}"

        if [ ! -f "$CONFIG_FILE" ]; then
          echo "‚ùå WhiteSource config file not found: $CONFIG_FILE"
          exit 1
        fi

        # Create a backup
        cp "$CONFIG_FILE" "$CONFIG_FILE.backup"

        # Update Python and pip paths in the config
        sed -i "s|python.path=.*|python.path=$PYTHON_PATH|g" "$CONFIG_FILE"
        sed -i "s|pip.path=.*|pip.path=$PIP_PATH|g" "$CONFIG_FILE"

        # Update requirements path to use the main requirements file
        MAIN_REQUIREMENTS="${{ steps.generate-requirements.outputs.main-requirements-file }}"
        if [ -f "$MAIN_REQUIREMENTS" ]; then
          sed -i "s|pip.requirementsFilePath=.*|pip.requirementsFilePath=$MAIN_REQUIREMENTS|g" "$CONFIG_FILE"
        fi

        # Set python.requirementsFileIncludes for profile-specific requirements files
        REQUIREMENTS_FILES="${{ steps.generate-requirements.outputs.requirements-files }}"
        if [ -n "$REQUIREMENTS_FILES" ]; then
          REQUIREMENTS_FILES_LIST=""
          
          # Build comma-separated list for python.requirementsFileIncludes
          for file in $REQUIREMENTS_FILES; do
            if [ -z "$REQUIREMENTS_FILES_LIST" ]; then
              REQUIREMENTS_FILES_LIST="$file"
            else
              REQUIREMENTS_FILES_LIST="$REQUIREMENTS_FILES_LIST,$file"
            fi
          done
          
          REQUIREMENTS_INCLUDES_LINE="python.requirementsFileIncludes=$REQUIREMENTS_FILES_LIST"
          
          # Update or add python.requirementsFileIncludes line
          if grep -q "^python.requirementsFileIncludes=" "$CONFIG_FILE"; then
            sed -i "s|^python.requirementsFileIncludes=.*|$REQUIREMENTS_INCLUDES_LINE|g" "$CONFIG_FILE"
          else
            echo "$REQUIREMENTS_INCLUDES_LINE" >> "$CONFIG_FILE"
          fi
        fi

        echo "‚úÖ WhiteSource configuration updated:"
        echo "   - python.path=$PYTHON_PATH"
        echo "   - pip.path=$PIP_PATH"
        echo "   - pip.requirementsFilePath=$MAIN_REQUIREMENTS"
        echo "   - python.requirementsFileIncludes=$REQUIREMENTS_FILES_LIST"
        echo "   - Additional requirements files: $REQUIREMENTS_FILES"

        # Show what changed
        echo "üìù Configuration changes:"
        diff "$CONFIG_FILE.backup" "$CONFIG_FILE" || true
