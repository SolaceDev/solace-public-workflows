name: Release to PyPi with Hatch

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: "Environment to release to."
        type: string
        required: true
      version:
        description: "Version increment type."
        type: string
        required: true
      pypi-project:
        description: "PyPi repository to release to."
        type: string
        required: true
      npm_package_path:
        type: string
        required: false
        default: ""
        description: "Path to the npm package"
      node_version:
        type: string
        required: false
        default: "20"
        description: "Node version to use for the npm package"
      npm_lock_file:
        type: string
        required: false
        default: "package-lock.json"
        description: "Path to the npm lock file"

      whitesource_product_name:
        type: string
        required: false
        default: ""
        description: "Whitesource product name"
      whitesource_project_name:
        type: string
        required: false
        default: ""
        description: "Whitesource project name"
    secrets:
      COMMIT_KEY:
        description: "SSH private key for the repository."
        required: true
      PYPI_TOKEN:
        description: "PyPi token"
        required: true
      WHITESOURCE_API_KEY:
        description: "Whitesource API key"
        required: true
      MANIFEST_AWS_REGION:
        description: "AWS region for the manifest"
        required: true
      MANIFEST_AWS_ACCESS_KEY_ID:
        description: "AWS access key ID for the manifest"
        required: true
      MANIFEST_AWS_SECRET_ACCESS_KEY:
        description: "AWS secret access key for the manifest"
        required: true
      SQUAD:
        description: "Squad for the manifest"
        required: true
permissions:
  id-token: write
  contents: write

jobs:
  release:
    name: release to PyPi
    timeout-minutes: 20
    environment: ${{ github.event.inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.COMMIT_KEY }}

      - name: Run WhiteSource Policy Gate
        if: ${{ inputs.whitesource_product_name != '' && inputs.whitesource_project_name != '' }}
        uses: docker://ghcr.io/solacedev/maas-build-actions:latest
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ inputs.whitesource_project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          WS_BLOCKING_POLICY_VIOLATION_LEVELS: "Major,Minor"
          FAIL_IF_POLICY_VIOLATIONS_FOUND: "True"
        with:
          entrypoint: /bin/sh
          args: >
            -c "
            . $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-policy-violation-checker &&
            python whitesource_policy_violation_checker.py
            "

      - name: Run WhiteSource Vulnerability Gate
        if: ${{ inputs.whitesource_product_name != '' && inputs.whitesource_project_name != '' }}
        uses: docker://ghcr.io/solacedev/maas-build-actions:latest
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ inputs.whitesource_project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          WS_JIRA_CHECK: "True" #No Jira Search for Open Vulnerability Issues
        with:
          entrypoint: /bin/sh
          args: >
            -c ". $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-vulnerability-checker &&
            python whitesource_vulnerability_checker.py
            "
      - name: Setup Node.js
        if: inputs.npm_package_path != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: ${{ inputs.npm_package_path }}/${{ inputs.npm_lock_file }}

      - name: Install Dependencies
        if: inputs.npm_package_path != ''
        run: |
          cd ${{ inputs.npm_package_path }}
          npm install
          npm run build

      - name: Set up Hatch
        uses: SolaceDev/solace-public-workflows/.github/actions/hatch-setup@main
        with:
          build: "false"

      - name: Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(hatch version)
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Check if last commit was a version bump commit
        id: check_bump
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $LAST_COMMIT_MSG"
          if echo "$LAST_COMMIT_MSG" | grep -q "\[ci skip\] Bump version to"; then
              echo "Previous commit was a version bump. Skipping version bump."
              echo "SKIP_BUMP=1" >> $GITHUB_ENV
          else
              echo "SKIP_BUMP=0" >> $GITHUB_ENV
          fi

      - name: Bump Version
        id: bump_version
        run: |
          if [ "$SKIP_BUMP" = "1" ]; then
              echo "Skipping version bump as the last commit was a version bump."
              echo "NEW_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          else
              if [ -n "${{ github.event.inputs.full_version }}" ]; then
                  if [[ "${{ github.event.inputs.full_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                      hatch version "${{ github.event.inputs.full_version }}"
                  else
                      echo "Invalid full_version provided: ${{ github.event.inputs.full_version }}. Expected format x.y.z."
                      exit 1
                  fi
              else
                  hatch version "${{ github.event.inputs.version }}"
              fi
              NEW_VERSION=$(hatch version)
              echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          fi

      - name: Fail if the current version doesn't exist
        if: env.CURRENT_VERSION == ''
        run: exit 1

      - name: Commit new version
        if: ${{ env.SKIP_BUMP == '0' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -a -m "[ci skip] Bump version to ${NEW_VERSION}"
          git push

      - name: Build project for distribution
        run: hatch build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          verbose: true
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
        with:
          artifacts: "dist/*.whl"
          makeLatest: true
          generateReleaseNotes: true
          tag: ${{ env.NEW_VERSION }}
