name: Test Generate GitHub Release Notes Action

on:
    push:
        paths:
            - "generate-github-release-notes/**"
            - ".github/workflows/test-generate-github-release-notes.yml"
    pull_request:
        paths:
            - "generate-github-release-notes/**"
            - ".github/workflows/test-generate-github-release-notes.yml"
    workflow_dispatch:

jobs:
    test-python-script:
        name: Test Python Script
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.13
              uses: actions/setup-python@v4
              with:
                  python-version: "3.13"

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Install dependencies
              working-directory: generate-github-release-notes
              run: |
                  uv sync --frozen --extra dev

            - name: Run unit tests
              working-directory: generate-github-release-notes
              run: |
                  uv run python -m pytest tests/test_simple.py -v

            - name: Run comprehensive tests
              working-directory: generate-github-release-notes
              run: |
                  uv run python -m pytest tests/test_generate_release_notes.py -v

            - name: Run integration tests
              working-directory: generate-github-release-notes
              run: |
                  uv run python tests/run_tests.py

    test-docker-build:
        name: Test Docker Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Build Docker image
              working-directory: generate-github-release-notes
              run: |
                  docker build -t test-generate-release-notes .

            - name: Test Docker image
              working-directory: generate-github-release-notes
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
              run: |
                  # Create a test config
                  echo '{"types":[{"type":"feat","section":"Features"},{"type":"fix","section":"Bug Fixes"}]}' > test-config.json

                  # Test the Docker image with a simple command (should handle missing refs gracefully)
                  docker run --rm \
                    -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
                    -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}" \
                    -v "$(pwd):/workspace" \
                    -w /workspace \
                    test-generate-release-notes \
                    "nonexistent-tag" "another-nonexistent-tag" "test-output.md" "test-config.json" || true

                  # Check that the script at least ran (exit code doesn't matter for nonexistent tags)
                  echo "Docker test completed"

    summary:
        name: Test Summary
        runs-on: ubuntu-latest
        needs: [test-python-script, test-docker-build]
        if: always()

        steps:
            - name: Check test results
              run: |
                  echo "Test Results Summary:"
                  echo "===================="

                  if [ "${{ needs.test-python-script.result }}" = "success" ]; then
                    echo "‚úÖ Python Script Tests: PASSED"
                  else
                    echo "‚ùå Python Script Tests: FAILED"
                  fi

                  if [ "${{ needs.test-docker-build.result }}" = "success" ]; then
                    echo "‚úÖ Docker Build Tests: PASSED"
                  else
                    echo "‚ùå Docker Build Tests: FAILED"
                  fi

                  # Fail if any required tests failed
                  if [ "${{ needs.test-python-script.result }}" != "success" ] || \
                     [ "${{ needs.test-docker-build.result }}" != "success" ]; then
                    echo ""
                    echo "‚ùå Some tests failed!"
                    exit 1
                  else
                    echo ""
                    echo "üéâ All tests passed!"
                  fi
