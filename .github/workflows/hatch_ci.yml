name: Release to PyPi with Hatch

on:
  workflow_call:
    inputs:
      min-python-version:
        type: string
        required: false
        default: "3.10"
        description: "Minimum Python version to test against."
      max-python-version:
        type: string
        required: false
        default: "3.13"
        description: "Maximum Python version to test against."
      whitesource_product_name:
        type: string
        required: false
        default: "solaceai"
        description: "WhiteSource product name"
      whitesource_project_name:
        type: string
        required: false
        default: ${{ github.event.repository.name }}
        description: "WhiteSource project name"
      whitesource_config_file:
        type: string
        required: false
        default: ""
        description: "WhiteSource configuration file"
      npm_package_path:
        type: string
        required: false
        default: ""
        description: "Path to the npm package"
      node_version:
        type: string
        required: false
        default: "20"
        description: "Node version to use for the npm package"
      npm_lock_file:
        type: string
        required: false
        default: "package-lock.json"
        description: "Path to the npm lock file"
      validate_dependency_conflicts:
        type: boolean
        required: false
        default: true
        description: "Validate dependency conflicts"
    secrets:
      SONAR_TOKEN:
        description: "SonarQube token for the repository."
        required: true
      SONAR_HOST_URL:
        description: "SonarQube host URL for the repository."
        required: true
      WHITESOURCE_API_KEY:
        description: "WhiteSource API key"
        required: false
      PRISMA_ACCESS_KEY_ID:
        description: "Prisma Access key ID"
        required: false
      PRISMA_SECRET_ACCESS_KEY:
        description: "Prisma Secret Access Key"
        required: false
      MANIFEST_AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID"
        required: false
      MANIFEST_AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key"
        required: false

permissions:
  id-token: write
  pull-requests: write
  checks: write
  contents: write
concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout Workflows Repository
        uses: actions/checkout@v4
        with:
          repository: SolaceDev/solace-public-workflows
          path: workflows-repo

      - name: Setup Conditional Steps
        id: conditional-steps
        shell: bash
        run: |
          # Set environment variables for conditional steps
          echo "is_push=${{ github.event_name == 'push' }}" >> $GITHUB_ENV
          echo "is_pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_ENV
          echo "is_fork_pr=${{ github.event.pull_request.head.repo.full_name != github.repository }}" >> $GITHUB_ENV
          echo "has_whitesource_config=${{ inputs.whitesource_product_name != '' && inputs.whitesource_project_name != '' }}" >> $GITHUB_ENV

      - name: Setup Node.js
        if: inputs.npm_package_path != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: ${{ inputs.npm_package_path }}/${{ inputs.npm_lock_file }}

      - name: Install Dependencies
        if: inputs.npm_package_path != ''
        run: |
          cd ${{ inputs.npm_package_path }}
          npm install
          npm run build

      - name: Set up Hatch
        id: hatch-setup
        uses: ./workflows-repo/.github/actions/hatch-setup
        with:
          min-python-version: ${{ inputs.min-python-version }}
          max-python-version: ${{ inputs.max-python-version }}

      - name: Validate Dependency Conflicts
        if: fromJson(inputs.validate_dependency_conflicts)
        uses: ./workflows-repo/.github/actions/validate-dependency-conflicts
        with:
          pyproject-file: pyproject.toml
          fail-on-conflicts: true
          script-path: workflows-repo/.github/scripts/validate_dependencies.py

      - name: Run Lint
        continue-on-error: true
        run: |
          # Verify where ruff check will run
          hatch run hatch-static-analysis:ruff check ./src ./tests --show-files 
          # Run ruff and capture its exit code
          hatch run hatch-static-analysis:ruff check ./src ./tests -o lint.json --output-format json || true
          # Verify if lint.json exists and contains valid JSON
          if [ -f lint.json ] && jq empty lint.json 2>/dev/null; then
            echo "Lint check completed successfully"
          else
            echo "Error: Lint check failed to produce valid output"
            exit 1
          fi
        shell: bash

      - name: Run Tests with default python version
        shell: bash
        if: steps.hatch-setup.outputs.matrix-present == 'false'
        run: |
          hatch run pytest --junitxml=junit-default.xml

      - name: Run Unit Tests on Python ${{ inputs.min-python-version }}
        continue-on-error: true
        shell: bash
        if: steps.hatch-setup.outputs.matrix-present == 'true'
        run: |
          hatch test --python ${{ inputs.min-python-version }}  --cover --parallel --junitxml=junit-${{ inputs.min-python-version }}.xml

      - name: Run Unit Tests on Python ${{ inputs.max-python-version }}
        continue-on-error: true
        shell: bash
        if: steps.hatch-setup.outputs.matrix-present == 'true'
        run: |
          hatch test --python ${{ inputs.max-python-version }}  --cover --parallel --junitxml=junit-${{ inputs.max-python-version }}.xml

      - name: Status Check - Unit Tests on default python version
        uses: mikepenz/action-junit-report@v5
        if: steps.hatch-setup.outputs.matrix-present == 'false' && hashFiles('junit-default.xml') != ''
        with:
          check_name: Unit Tests on default python version
          report_paths: junit-default.xml

      - name: Status Check - Unit Tests on Python ${{ inputs.min-python-version }}
        uses: mikepenz/action-junit-report@v5
        if: steps.hatch-setup.outputs.matrix-present == 'true' && hashFiles('junit-${{ inputs.min-python-version }}.xml') != ''
        with:
          check_name: Unit Tests on Python ${{ inputs.min-python-version }}
          report_paths: junit-${{ inputs.min-python-version }}.xml

      - name: Status Check - Unit Tests on Python ${{ inputs.max-python-version }}
        uses: mikepenz/action-junit-report@v5
        if: steps.hatch-setup.outputs.matrix-present == 'true' && hashFiles('junit-${{ inputs.max-python-version }}.xml') != ''
        with:
          check_name: Unit Tests on Python ${{ inputs.max-python-version }}
          report_paths: junit-${{ inputs.max-python-version }}.xml

      - name: Combine Coverage Reports
        continue-on-error: true
        if: hashFiles('*.cov') != ''
        run: |
          hatch run hatch-test.py${{ inputs.max-python-version }}:coverage combine
        shell: bash

      - name: Report coverage
        continue-on-error: true
        if: hashFiles('*.cov') != ''
        run: |
          hatch run hatch-test.py${{ inputs.max-python-version }}:coverage xml
        shell: bash

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
            -Dsonar.sources=src/
            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.ruff.reportPaths=lint.json

      - name: SonarQube Quality Gate check
        if: fromJson(env.is_pr)
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Comment on PR with Test Results
        if: fromJson(env.is_pr) && (hashFiles('junit-*.xml') != '') && (hashFiles('coverage.xml') != '')
        continue-on-error: true
        env:
          MIN_PYTHON_VERSION_FILE: ${{ format('junit-{0}.xml', inputs.min-python-version) }}
          MAX_PYTHON_VERSION_FILE: ${{ format('junit-{0}.xml', inputs.max-python-version) }}
        uses: xportation/junit-coverage-report@main
        with:
          junit-path: ${{ hashFiles('junit-default.xml') != '' && 'junit-default.xml' || hashFiles(env.MIN_PYTHON_VERSION_FILE) != '' && env.MIN_PYTHON_VERSION_FILE || hashFiles(env.MAX_PYTHON_VERSION_FILE) != '' && env.MAX_PYTHON_VERSION_FILE }}
          coverage-path: coverage.xml

      - name: Verify Packages
        run: |
          ls dist/*.tar.gz | xargs -n1 hatch run python -m twine check
          ls dist/*.whl | xargs -n1 hatch run python -m twine check
        shell: bash

      - name: Install Virtualenv for Whitesource Scan
        if: fromJson(env.has_whitesource_config)
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install virtualenv

      - name: Generate Clean Requirements for WhiteSource
        if: fromJson(env.has_whitesource_config)
        id: generate-requirements
        uses: ./workflows-repo/.github/actions/generate-clean-requirements
        with:
          max-python-version: ${{ inputs.max-python-version }}
          whitesource_config_file: ${{ inputs.whitesource_config_file }}
          script-path: workflows-repo/.github/scripts/consolidate_requirements.py
          output-dir: .

      - name: List Generated Requirements Files
        if: fromJson(env.has_whitesource_config)
        shell: bash
        run: |
          echo "📋 Generated requirements files:"
          echo "Main requirements file: ${{ steps.generate-requirements.outputs.main-requirements-file }}"
          echo "All requirements files: ${{ steps.generate-requirements.outputs.requirements-files }}"
          echo ""
          echo "📄 File contents preview:"
          for file in ${{ steps.generate-requirements.outputs.requirements-files }}; do
            if [ -f "$file" ]; then
              echo "=== $file ==="
              head -10 "$file"
              echo "... (showing first 10 lines)"
              echo ""
            fi
          done

      - name: Show WhiteSource Configuration
        if: fromJson(env.has_whitesource_config) && inputs.whitesource_config_file != ''
        shell: bash
        run: |
          echo "🔧 WhiteSource Configuration File:"
          if [ -f "${{ inputs.whitesource_config_file }}" ]; then
            echo "=== ${{ inputs.whitesource_config_file }} ==="
            cat "${{ inputs.whitesource_config_file }}"
          else
            echo "❌ WhiteSource config file not found: ${{ inputs.whitesource_config_file }}"
          fi

      - name: Run Whitesource Scan
        if: fromJson(env.has_whitesource_config)
        uses: ./workflows-repo/.github/actions/whitesource-scan
        with:
          whitesource_product_name: ${{ inputs.whitesource_product_name }}
          whitesource_project_name: ${{ inputs.whitesource_project_name }}
          whitesource_api_key: ${{ secrets.WHITESOURCE_API_KEY }}
          whitesource_config_file: ${{ inputs.whitesource_config_file }}

      - name: Run WhiteSource PR Checker (Policy Violations)
        id: whitesource-pr-policy-violation-checker
        if: fromJson(env.is_pr) && fromJson(env.has_whitesource_config)
        continue-on-error: true
        uses: docker://ghcr.io/solacedev/maas-build-actions:ws-quiet
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ inputs.whitesource_project_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WS_BLOCKING_POLICY_VIOLATION_LEVELS: "Major,Minor"
          FAIL_IF_POLICY_VIOLATIONS_FOUND: "True"
          GH_ORG: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          entrypoint: /bin/sh
          args: >
            -c "
            . $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-pr-checker &&
            python whitesource_pr_checker.py
            "

      - name: Run WhiteSource Policy Gate
        id: whitesource-policy-gate
        if: fromJson(env.is_push) && fromJson(env.has_whitesource_config)
        uses: docker://ghcr.io/solacedev/maas-build-actions:ws-quiet
        continue-on-error: true
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ inputs.whitesource_project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          WS_BLOCKING_POLICY_VIOLATION_LEVELS: "Major,Minor"
          FAIL_IF_POLICY_VIOLATIONS_FOUND: "True"
        with:
          entrypoint: /bin/sh
          args: >
            -c "
            . $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-policy-violation-checker &&
            python whitesource_policy_violation_checker.py
            "

      - name: Run WhiteSource Vulnerability Gate
        if: fromJson(env.is_push) && fromJson(env.has_whitesource_config)
        id: whitesource-vulnerability-gate
        uses: docker://ghcr.io/solacedev/maas-build-actions:ws-quiet
        continue-on-error: true
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ inputs.whitesource_project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          WS_JIRA_CHECK: "True" #Enable Jira Search for Open Vulnerability Issues
        with:
          entrypoint: /bin/sh
          args: >
            -c ". $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-vulnerability-checker &&
            python whitesource_vulnerability_checker.py
            "

      - name: Post WhiteSource Vulnerability Gate Check Status
        if: fromJson(env.is_push) && fromJson(env.has_whitesource_config)
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ github.token }}
          name: "WhiteSource Vulnerability Gate"
          conclusion: ${{ steps.whitesource-vulnerability-gate.outcome == 'success' && 'success' || 'failure' }}
          details_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {
              "summary": "WhiteSource vulnerability gate scan ${{ steps.whitesource-vulnerability-gate.outcome == 'success' && 'completed successfully' || 'failed or found issues' }}",
              "text_description": "### WhiteSource Vulnerability Gate Results\n\n${{ steps.whitesource-vulnerability-gate.outcome == 'success' && '✅ No blocking vulnerabilities found' || '❌ Blocking vulnerabilities found' }}\n\n#### Jira Issues\n\n**Pending Issues:** ${{ steps.whitesource-vulnerability-gate.outputs.pending_jiras && format('[View Issues](https://sol-jira.atlassian.net/issues/?jql=issue%20in%20({0}))', steps.whitesource-vulnerability-gate.outputs.pending_jiras) || 'None' }}\n\n**Blocking Issues:** ${{ steps.whitesource-vulnerability-gate.outputs.blocking_jiras && format('[View Issues](https://sol-jira.atlassian.net/issues/?jql=issue%20in%20({0}))', steps.whitesource-vulnerability-gate.outputs.blocking_jiras) || 'None' }}"
            }

      - name: Post WhiteSource Policy Gate Check Status
        if: fromJson(env.is_push) && fromJson(env.has_whitesource_config)
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ github.token }}
          name: "WhiteSource Policy Gate"
          conclusion: ${{ steps.whitesource-policy-gate.outcome == 'success' && 'success' || 'failure' }}

      - name: WhiteSource PR Policy Violation Checker Status
        if: fromJson(env.has_whitesource_config) && fromJson(env.is_pr)
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ github.token }}
          name: "WhiteSource PR Policy Violation Checker"
          conclusion: ${{ steps.whitesource-pr-policy-violation-checker.outputs.api_success == 'true' && 'success' || 'failure' }}
          details_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {
              "summary": "WhiteSource PR Policy Violation Checker ${{ steps.whitesource-pr-policy-violation-checker.outputs.api_success == 'true' && 'completed successfully' || 'failed or encountered issues' }}",
              "text_description": "### WhiteSource PR Policy Violation Checker Results\n\n${{ steps.whitesource-pr-policy-violation-checker.outputs.api_success == 'true' && '✅ Policy Violation Checker completed successfully' || '❌ Policy Violation Checker failed or encountered issues' }}\n\n#### Jira Issues\n\n**Pending Issues:** ${{ steps.format-jira-links.outputs.pending_formatted }}\n\n**Blocking Issues:** ${{ steps.format-jira-links.outputs.blocking_formatted }}\n\n**Excluded Issues:** ${{ steps.format-jira-links.outputs.excluded_formatted }}\n\n*For detailed policy violation report, check the Slack notification.*"
            }
