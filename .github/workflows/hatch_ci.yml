name: Release to PyPi with Hatch

on:
  workflow_call:
    inputs:
      min-python-version:
        type: string
        required: false
        default: "3.10"
        description: "Minimum Python version to test against."
      max-python-version:
        type: string
        required: false
        default: "3.13"
        description: "Maximum Python version to test against."
      whitesource_product_name:
        type: string
        required: false
        default: "solaceai"
        description: "WhiteSource product name"
      whitesource_project_name:
        type: string
        required: false
        default: ${{ github.event.repository.name }}
        description: "WhiteSource project name"
      whitesource_config_file:
        type: string
        required: false
        default: ""
        description: "WhiteSource configuration file"
      npm_package_path:
        type: string
        required: false
        default: ""
        description: "Path to the npm package"
      node_version:
        type: string
        required: false
        default: "20"
        description: "Node version to use for the npm package"
      npm_lock_file:
        type: string
        required: false
        default: "package-lock.json"
        description: "Path to the npm lock file"
      validate_dependency_conflicts:
        type: boolean
        required: false
        default: true
        description: "Validate dependency conflicts"
    secrets:
      SONAR_TOKEN:
        description: "SonarQube token for the repository."
        required: true
      SONAR_HOST_URL:
        description: "SonarQube host URL for the repository."
        required: true
      WHITESOURCE_API_KEY:
        description: "WhiteSource API key"
        required: false
      PRISMA_ACCESS_KEY_ID:
        description: "Prisma Access key ID"
        required: false
      PRISMA_SECRET_ACCESS_KEY:
        description: "Prisma Secret Access Key"
        required: false
      MANIFEST_AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID"
        required: false
      MANIFEST_AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key"
        required: false
      MANIFEST_AWS_REGION:
        description: "AWS Region"
        required: false

permissions:
  id-token: write
  pull-requests: write
  checks: write
  contents: write

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------------------------------
  # DEPENDENCY VALIDATION JOB (runs once)
  # ----------------------------------------------------
  validate-dependencies:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Checkout Workflows Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: SolaceDev/solace-public-workflows
          path: workflows-repo

      - name: Validate Dependency Conflicts
        if: fromJson(inputs.validate_dependency_conflicts)
        uses: ./workflows-repo/.github/actions/validate-dependency-conflicts
        with:
          pyproject-file: pyproject.toml
          fail-on-conflicts: true
          script-path: workflows-repo/.github/scripts/validate_dependencies.py

  # ----------------------------------------------------
  # PARALLEL JOB: Python Version Testing Matrix
  # ----------------------------------------------------
  test-python-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - ${{ inputs.min-python-version }}
          - ${{ inputs.max-python-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Checkout Workflows Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: SolaceDev/solace-public-workflows
          path: workflows-repo

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.5.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install Hatch
        run: uv tool install hatch

      - name: Run Tests with Coverage
        continue-on-error: true
        run: |
          hatch -v test --cover --junitxml=junit-${{ matrix.python-version }}.xml --cov-report=xml

      - name: Upload Test Results
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: hashFiles('junit-${{ matrix.python-version }}.xml') != ''
        with:
          check_name: Unit Tests on Python ${{ matrix.python-version }}
          report_paths: junit-${{ matrix.python-version }}.xml
          include_passed: true
      - name: Upload Coverage Data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            coverage.xml
          retention-days: 1

  # ----------------------------------------------------
  # PARALLEL JOB: Build and Package Verification
  # ----------------------------------------------------
  build-and-verify:
    name: Build and Verify Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Checkout Workflows Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: SolaceDev/solace-public-workflows
          path: workflows-repo

      - name: Setup Node.js
        if: inputs.npm_package_path != ''
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          cache-dependency-path: ${{ inputs.npm_package_path }}/${{ inputs.npm_lock_file }}

      - name: Install Dependencies
        if: inputs.npm_package_path != ''
        run: |
          cd ${{ inputs.npm_package_path }}
          npm install
          npm run build

      - name: Setup Python for Build
        uses: actions/setup-python@v5.5.0
        with:
          python-version: ${{ inputs.max-python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install Hatch
        run: uv tool install hatch

      - name: Install twine
        run: uv tool install twine

      - name: Run Lint
        continue-on-error: true
        run: |
          # Verify where ruff check will run
          hatch run hatch-static-analysis:ruff check ./src ./tests --show-files 
          # Run ruff and capture its exit code
          hatch run hatch-static-analysis:ruff check ./src ./tests -o lint.json --output-format json || true
          # Verify if lint.json exists and contains valid JSON
          if [ -f lint.json ] && jq empty lint.json 2>/dev/null; then
            echo "Lint check completed successfully"
          else
            echo "Error: Lint check failed to produce valid output"
            exit 1
          fi
        shell: bash

      - name: Build Package
        run: hatch -v build

      - name: Verify Packages
        run: |
          ls dist/*.tar.gz | xargs -n1 twine check
          ls dist/*.whl | xargs -n1 twine check
        shell: bash

  # ----------------------------------------------------
  # COVERAGE AND SONARQUBE JOB (runs after tests complete)
  # ----------------------------------------------------
  coverage-and-sonar:
    name: Coverage and SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [validate-dependencies, test-python-matrix]
    if: ${{ !github.event.repository.fork }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-${{ inputs.max-python-version }}
          path: coverage-data-${{ inputs.max-python-version }}

      - name: Combine Coverage Reports
        continue-on-error: true
        run: |
          # Find all coverage files
          cp coverage-data-${{ inputs.max-python-version }}/coverage.xml .
        shell: bash

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            "-Dsonar.tests=tests/"
            "-Dsonar.verbose=true"
            "-Dsonar.sources=src/"
            "-Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}"
            "-Dsonar.python.coverage.reportPaths=coverage.xml"

      - name: SonarQube Quality Gate check
        if: github.event_name == 'pull_request'
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # ----------------------------------------------------
  # WHITESOURCE SCANNING JOB (runs in parallel)
  # ----------------------------------------------------
  whitesource-scan:
    name: WhiteSource Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !github.event.repository.fork && github.ref_name == github.event.repository.default_branch
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Checkout Workflows Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: SolaceDev/solace-public-workflows
          path: workflows-repo

      - name: Setup Python for Whitesource Scan
        uses: actions/setup-python@v5.5.0
        with:
          python-version: ${{ inputs.max-python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Setup WhiteSource Project Name
        id: setup-ws-project
        shell: bash
        run: |
          WS_PROJECT_NAME="${{ inputs.whitesource_project_name }}"

          if [ "${{ inputs.whitesource_project_name }}" = "" ]; then
            WS_PROJECT_NAME="${{ github.event.repository.name }}"
          fi
          echo "ws_project_name=${WS_PROJECT_NAME}" >> $GITHUB_ENV

      - name: Install Virtualenv for Whitesource Scan
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install virtualenv

      - name: Generate Clean Requirements for WhiteSource
        id: generate-requirements
        uses: ./workflows-repo/.github/actions/generate-clean-requirements
        with:
          max-python-version: ${{ inputs.max-python-version }}
          whitesource_config_file: ${{ inputs.whitesource_config_file }}
          script-path: workflows-repo/.github/scripts/consolidate_requirements.py
          output-dir: .

      - name: List Generated Requirements Files
        shell: bash
        run: |
          echo "📋 Generated requirements files:"
          echo "Main requirements file: ${{ steps.generate-requirements.outputs.main-requirements-file }}"
          echo "All requirements files: ${{ steps.generate-requirements.outputs.requirements-files }}"
          echo ""
          echo "📄 File contents preview:"
          for file in ${{ steps.generate-requirements.outputs.requirements-files }}; do
            if [ -f "$file" ]; then
              echo "=== $file ==="
              head -10 "$file"
              echo "... (showing first 10 lines)"
              echo ""
            fi
          done

      - name: Show WhiteSource Configuration
        if: inputs.whitesource_config_file != ''
        shell: bash
        run: |
          echo "🔧 WhiteSource Configuration File:"
          if [ -f "${{ inputs.whitesource_config_file }}" ]; then
            echo "=== ${{ inputs.whitesource_config_file }} ==="
            cat "${{ inputs.whitesource_config_file }}"
          else
            echo "❌ WhiteSource config file not found: ${{ inputs.whitesource_config_file }}"
          fi

      - name: Run Whitesource Scan
        uses: ./workflows-repo/.github/actions/whitesource-scan
        with:
          whitesource_product_name: ${{ inputs.whitesource_product_name }}
          whitesource_project_name: ${{ inputs.whitesource_project_name || github.event.repository.name }}
          whitesource_api_key: ${{ secrets.WHITESOURCE_API_KEY }}
          whitesource_config_file: ${{ inputs.whitesource_config_file }}

  # ----------------------------------------------------
  # WHITESOURCE POLICY AND VULNERABILITY GATES
  # ----------------------------------------------------
  whitesource-gates:
    name: WhiteSource Policy and Vulnerability Gates
    runs-on: ubuntu-latest
    needs: [whitesource-scan]
    if: github.event_name == 'push' && !github.event.repository.fork && github.ref_name == github.event.repository.default_branch
    steps:
      - name: Setup WhiteSource Project Name
        id: setup-ws-project-gates
        shell: bash
        run: |
          WS_PROJECT_NAME="${{ inputs.whitesource_project_name }}"

          if [ "${{ inputs.whitesource_project_name }}" = "" ]; then
            WS_PROJECT_NAME="${{ github.event.repository.name }}"
          fi

          echo "ws_project_name=${WS_PROJECT_NAME}" >> $GITHUB_ENV

      - name: Run WhiteSource Policy Gate
        id: whitesource-policy-gate
        uses: docker://ghcr.io/solacedev/maas-build-actions:latest
        continue-on-error: true
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ env.ws_project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          WS_BLOCKING_POLICY_VIOLATION_LEVELS: "Major,Minor"
          FAIL_IF_POLICY_VIOLATIONS_FOUND: "True"
          STATUS_CHECK: "True"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          entrypoint: /bin/sh
          args: >
            -c "
            . $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-policy-violation-checker &&
            python whitesource_policy_violation_checker.py
            "

      - name: Run WhiteSource Vulnerability Gate
        id: whitesource-vulnerability-gate
        uses: docker://ghcr.io/solacedev/maas-build-actions:latest
        continue-on-error: true
        env:
          WS_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PRODUCT_NAME: ${{ inputs.whitesource_product_name }}
          WS_PROJECT_NAME: ${{ env.ws_project_name }}
          AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.MANIFEST_AWS_REGION }}
          WS_JIRA_CHECK: "True"
          JIRA_ONLY: "True"
          STATUS_CHECK: "True"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          entrypoint: /bin/sh
          args: >
            -c ". $VIRTUAL_ENV/bin/activate &&
            cd $ACTIONS_PATH/whitesource-vulnerability-checker &&
            python whitesource_vulnerability_checker.py
            "
